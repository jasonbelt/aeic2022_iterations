// Auto-generated by Sireum Presentasi
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.net.URL;
import java.util.LinkedList;
import java.util.List;

public class Presentasi extends Application {

    public final static long TRAILING = 2000;
    public final static long TIMELINE_GRANULARITY = 1;
    public final static double TEXT_VOLUME = 1.0;

    public interface Media {
        String getUri();
        boolean isReady();
        boolean hasError();
        long getDurationMillis();
        long getTimeline();
    }

    public final static class Image implements Media {
        public final String uri;
        public final ImageView imageView;
        private final long timeline;

        public Image(final String path, final long timeline) {
            this.uri = getResourceUri(path);
            this.timeline = timeline;
            this.imageView = new ImageView(new javafx.scene.image.Image(uri));
        }

        public String getUri() { return this.uri; }

        public boolean isReady() {
            return true;
        }

        public boolean hasError() {
            return false;
        }

        public long getDurationMillis() {
            return 0L;
        }

        public long getTimeline() {
            return this.timeline;
        }
    }

    public final static class Sound implements Media {
        public final String uri;
        private final long timeline;
        public final MediaPlayer mediaPlayer;
        private boolean ready = false;
        private boolean error = false;
        private long duration = 0L;

        public Sound(final String path, final long timeline) {
            this.uri = getResourceUri(path);
            this.timeline = timeline;
            this.mediaPlayer = new MediaPlayer(new javafx.scene.media.Media(uri));
            this.mediaPlayer.setOnReady(() -> {
                this.ready = true;
                this.duration = (long) Math.ceil(mediaPlayer.getTotalDuration().toMillis());
            });
            this.mediaPlayer.setOnError(() -> this.error = true);
        }

        public String getUri() { return this.uri; }

        public boolean isReady() {
            return this.ready;
        }

        public boolean hasError() {
            return this.error;
        }

        public long getDurationMillis() {
            return this.duration;
        }

        public long getTimeline() {
            return this.timeline;
        }
    }

    public final static class Video implements Media {
        public final String uri;
        private final long timeline;
        public final MediaView mediaView;
        public final boolean muted;
        public final double rate;
        public final double startMillis;
        public final double endMillis;
        private boolean ready;
        private boolean error;
        private long duration;

        public Video(final String path, final long timeline, final boolean muted, final double rate, final double startMs, final double endMs) {
            this.uri = getResourceUri(path);
            this.timeline = timeline;
            this.rate = rate;
            this.startMillis = startMs;
            this.endMillis = endMs;
            this.muted = muted;
            final MediaPlayer mediaPlayer = new MediaPlayer(new javafx.scene.media.Media(uri));
            mediaPlayer.setOnReady(() -> {
                this.ready = true;
                if (endMs > 0.0) {
                    this.duration = (long) Math.ceil(endMs - startMs);
                } else {
                    this.duration = (long) Math.ceil(mediaPlayer.getTotalDuration().toMillis());
                }
            });
            mediaPlayer.setOnError(() -> this.error = true);
            this.mediaView = new MediaView(mediaPlayer);
        }

        public String getUri() { return this.uri; }

        public boolean isReady() {
            return this.ready;
        }

        public boolean hasError() { return this.error; }

        public long getDurationMillis() {
            return this.duration;
        }

        public long getTimeline() {
            return this.timeline;
        }
    }

    private final LinkedList<Media> medias = new LinkedList<>();
    private Stage stage = null;
    private long startTime = 0;
    private int slideNo = 0;

    public static String getResourceUri(final String path) {
        try {
            final URL url = Presentasi.class.getResource(path);
            if (url != null) {
                return url.toURI().toASCIIString();
            }
            throw new RuntimeException("Could not load " + path);
        } catch (final Throwable t){
            t.printStackTrace();
        }
        Platform.exit();
        return null;
    }

    @Override
    public void init() {
        final List<String> args = getParameters().getRaw();
        switch (args.size()) {
            case 0:
                break;
            case 1:
                final String arg = args.get(0);
                try {
                    if (arg.charAt(0) == '#') {
                        slideNo = Integer.parseInt(arg.substring(1));
                    } else {
                        startTime = Long.parseLong(arg);
                    }
                } catch (Throwable t) {
                    System.err.println("Invalid argument " + arg);
                    System.err.flush();
                    Platform.exit();
                }
                break;
            default:
                System.err.println("Invalid arguments");
                System.err.flush();
                Platform.exit();
        }

        final long t_0 = 1500L; // 1500 (00:00:01:500)
        medias.add(new Video("/video/iter1.mp4", t_0, true, 1.0, 0.0, 0.1));
        final long t_1 = t_0 + 500L; // 2000 (00:00:02:000)
        medias.add(new Sound("/audio/3702B6-Modifying_the_d.wav", t_1));
        final long t_2 = t_1 + 6740L; // 8740 (00:00:08:740)
        medias.add(new Video("/video/iter1.mp4", t_2, true, 1.0, 0.0, 21000.0));
        final long t_3 = t_2;
        medias.add(new Sound("/audio/250616-For_example__we.wav", t_3));
        final long t_4 = t_3 + 22120L; // 30860 (00:00:30:860)
        medias.add(new Video("/video/iter1.mp4", t_4, true, 1.0, 21000.0, 32000.0));
        final long t_5 = t_4;
        medias.add(new Sound("/audio/39C837-Now_we_need_to_.wav", t_5));
        final long t_6 = t_5 + 13300L; // 44160 (00:00:44:160)
        medias.add(new Video("/video/iter1.mp4", t_6, true, 1.0, 32000.0, 51000.0));
        final long t_7 = t_6;
        medias.add(new Sound("/audio/F5174E-The_ports_can_b.wav", t_7));
        final long t_8 = t_7 + 5885L; // 50045 (00:00:50:045)
        medias.add(new Video("/video/iter1.mp4", t_8, true, 1.0, 51000.0, 59000.0));
        final long t_9 = t_8;
        medias.add(new Sound("/audio/B4E0B2-Now_connect_the.wav", t_9));
        final long t_10 = t_9 + 8860L; // 58905 (00:00:58:905)
        medias.add(new Video("/video/iter1.mp4", t_10, false, 1.0, 59000.0, 63000.0));
        final long t_11 = t_10 + 6001L; // 64906 (00:01:04:906)
        medias.add(new Video("/video/iter2.mp4", t_11, true, 1.0, 0.0, 13000.0));
        final long t_12 = t_11;
        medias.add(new Sound("/audio/E593D1-Changes_to_the_.wav", t_12));
        final long t_13 = t_12 + 9005L; // 73911 (00:01:13:911)
        medias.add(new Video("/video/iter2.mp4", t_13, true, 1.0, 13000.0, 47000.0));
        final long t_14 = t_13;
        medias.add(new Sound("/audio/53A0C0-And_then_add_th.wav", t_14));
        final long t_15 = t_14 + 3720L; // 77631 (00:01:17:631)
        medias.add(new Video("/video/iter2.mp4", t_15, false, 1.0, 39000.0, 47000.0));
        final long t_16 = t_15 + 9501L; // 87132 (00:01:27:132)
        medias.add(new Video("/video/iter1.mp4", t_16, true, 1.0, 0.0, 0.1));
        final long t_17 = t_16 + 500L; // 87632 (00:01:27:632)
        medias.add(new Sound("/audio/3702B6-Modifying_the_d.wav", t_17));
        final long t_18 = t_17 + 6740L; // 94372 (00:01:34:372)
        medias.add(new Video("/video/iter1.mp4", t_18, true, 1.0, 0.0, 21000.0));
        final long t_19 = t_18;
        medias.add(new Sound("/audio/250616-For_example__we.wav", t_19));
        final long t_20 = t_19 + 22120L; // 116492 (00:01:56:492)
        medias.add(new Video("/video/iter1.mp4", t_20, true, 1.0, 21000.0, 32000.0));
        final long t_21 = t_20;
        medias.add(new Sound("/audio/39C837-Now_we_need_to_.wav", t_21));
        final long t_22 = t_21 + 13300L; // 129792 (00:02:09:792)
        medias.add(new Video("/video/iter1.mp4", t_22, true, 1.0, 32000.0, 51000.0));
        final long t_23 = t_22;
        medias.add(new Sound("/audio/F5174E-The_ports_can_b.wav", t_23));
        final long t_24 = t_23 + 5885L; // 135677 (00:02:15:677)
        medias.add(new Video("/video/iter1.mp4", t_24, true, 1.0, 51000.0, 59000.0));
        final long t_25 = t_24;
        medias.add(new Sound("/audio/B4E0B2-Now_connect_the.wav", t_25));
        final long t_26 = t_25 + 8860L; // 144537 (00:02:24:537)
        medias.add(new Video("/video/iter1.mp4", t_26, false, 1.0, 59000.0, 63000.0));
        final long t_27 = t_26 + 6001L; // 150538 (00:02:30:538)
        medias.add(new Video("/video/iter2.mp4", t_27, true, 1.0, 0.0, 13000.0));
        final long t_28 = t_27;
        medias.add(new Sound("/audio/E593D1-Changes_to_the_.wav", t_28));
        final long t_29 = t_28 + 9005L; // 159543 (00:02:39:543)
        medias.add(new Video("/video/iter2.mp4", t_29, true, 1.0, 13000.0, 47000.0));
        final long t_30 = t_29;
        medias.add(new Sound("/audio/53A0C0-And_then_add_th.wav", t_30));
        final long t_31 = t_30 + 3720L; // 163263 (00:02:43:263)
        medias.add(new Video("/video/iter2.mp4", t_31, false, 1.0, 39000.0, 47000.0));

        final long end = 213196L; // 00:03:33:196

        final Rectangle2D rect = Screen.getPrimary().getBounds();
        final double width = rect.getWidth();
        final double height = rect.getHeight();

        for (final Media media : medias) {
            final String uri = media.getUri();
            System.out.print("Loading " + uri + " ... ");
            System.out.flush();
            while (!media.isReady()) {
                if (media.hasError()) {
                    System.err.println("failed");
                    System.err.flush();
                    Platform.exit();
                }
                sleep(100);
            }
            System.out.println("done");
            System.out.flush();
        }
        final Thread thread = new Thread(() -> {
            while (Presentasi.this.stage == null) Presentasi.sleep(100);
            final int size = medias.size();
            long start = System.currentTimeMillis();
            int i = 0;
            if (slideNo > 0) {
                int j = 0;
                while (i < size && j < slideNo) {
                    if (!(medias.get(i) instanceof Sound)) {
                        j = j + 1;
                    }
                    i++;
                }
                while (i < size && medias.get(i) instanceof Sound) i++;
                if (i < size) start = start - medias.get(i).getTimeline();
            } else if (startTime > 0) {
                while (i < size && medias.get(i).getTimeline() < startTime) {
                    i++;
                }
                while (i < size && medias.get(i) instanceof Sound) i++;
                if (i < size) start = start - medias.get(i).getTimeline();
            }
            while (i < size) {
                final Media media = medias.get(i);
                while (System.currentTimeMillis() - start <= media.getTimeline()) Presentasi.sleep(TIMELINE_GRANULARITY);
                if (media instanceof Sound) {
                    final MediaPlayer mediaPlayer = ((Sound) media).mediaPlayer;
                    mediaPlayer.setVolume(TEXT_VOLUME);
                    mediaPlayer.play();
                } else if (media instanceof Image) {
                    final Image graphic = (Image) media;
                    final StackPane root = new StackPane();
                    final ImageView imageView = graphic.imageView;
                    root.getChildren().add(imageView);
                    imageView.setPreserveRatio(true);
                    imageView.setSmooth(true);
                    imageView.setFitWidth(width);
                    imageView.setFitHeight(height);
                    stage.getScene().setRoot(root);
                    Platform.runLater(() -> stage.show());
                } else if (media instanceof Video) {
                    final Video video = (Video) media;
                    final StackPane root = new StackPane();
                    final MediaView mediaView = video.mediaView;
                    root.getChildren().add(mediaView);
                    mediaView.setPreserveRatio(true);
                    mediaView.setSmooth(true);
                    mediaView.setFitWidth(width);
                    mediaView.setFitHeight(height);
                    stage.getScene().setRoot(root);
                    final MediaPlayer player = mediaView.getMediaPlayer();
                    player.setStartTime(Duration.millis(video.startMillis));
                    player.setRate(video.rate);
                    if (video.endMillis > 0.0) player.setStopTime(Duration.millis(video.endMillis));
                    player.setVolume(1.0);
                    player.setMute(video.muted);
                    Platform.runLater(() -> {
                        stage.show();
                        player.play();
                    });
                }
                i++;
            }
            while (System.currentTimeMillis() - start <= end) Presentasi.sleep(TIMELINE_GRANULARITY);
            Platform.exit();
        });
        thread.setDaemon(true);
        thread.start();
    }

    public static void sleep(final long millis) {
        try {
            Thread.sleep(millis);
        } catch (final Throwable t) {
            // skip
        }
    }

    @Override
    public void start(final Stage primaryStage) {
        primaryStage.setFullScreen(true);
        primaryStage.setResizable(false);
        primaryStage.setFullScreenExitHint("");
        final Scene scene = new Scene(new StackPane(), primaryStage.getMaxWidth(), primaryStage.getMaxHeight());
        primaryStage.setScene(scene);
        this.stage = primaryStage;
    }

}